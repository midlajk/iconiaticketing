<div class="card" id="generalTicketForm">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">General Ticket</h5>
      <span class="badge bg-primary">Default</span>
    </div>
    <div class="card-body">
      <form id="ticketForm" enctype="multipart/form-data">
        <input type="hidden" name="ticketType" value="GeneralTicket">
        <input type="hidden" name="status" value="New">
        <!-- Title -->

        
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="email" class="form-label">Registered Email</label>
                <select  class="form-control emailInput" id="email"  name="requestor.email"  required></select>
                <div class="invalid-feedback">Please enter your email.</div>
              </div>
              <div class="col-md-6 mb-3">
                <label for="name" class="form-label">Name of Requestor</label>
                <select type="text" class="form-control" id="name" name="requestor.name" required>></select>
                <div class="invalid-feedback">Please enter your name.</div>
              </div>
            </div>
          
        <div class="mb-4">
          <label for="title" class="form-label">Title</label>
          <input type="text" class="form-control form-control-lg" id="title" name="title" placeholder="Briefly describe your issue" required>
          <div class="invalid-feedback">Please provide a title for your ticket.</div>
        </div>
        <% if (user) { %>

        <!-- Priority -->
        <div class="mb-4">

          <label class="form-label">Priority</label>
          <div class="btn-group w-100" role="group">
            <input type="radio" class="btn-check" name="priority" id="priority-low" value="Low" autocomplete="off">
            <label class="btn btn-outline-success" for="priority-low">
              <i class="fas fa-arrow-down me-2"></i>Low
            </label>

            <input type="radio" class="btn-check" name="priority" id="priority-medium" value="Medium" autocomplete="off" checked>
            <label class="btn btn-outline-warning" for="priority-medium">
              <i class="fas fa-equals me-2"></i>Medium
            </label>

            <input type="radio" class="btn-check" name="priority" id="priority-high" value="High" autocomplete="off">
            <label class="btn btn-outline-danger" for="priority-high">
              <i class="fas fa-arrow-up me-2"></i>High
            </label>
          </div>
        </div>
        <%}%>

        <!-- Description -->
        <div class="mb-4">
          <label for="description" class="form-label">Description</label>
          <textarea class="form-control" id="description" name="description" rows="5" placeholder="Please describe your issue in detail..." required></textarea>
          <div class="invalid-feedback">Please provide a description of your issue.</div>
        </div>
        
        <!-- Requestor Information -->
     
        
        <!-- Attachments -->
        <div class="mb-4">
          <label class="form-label">Attachments</label>
          <div class="file-upload-area p-4 border rounded text-center">
            <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
            <h5>Drag and drop files here</h5>
            <p class="text-muted">or click to browse files</p>
            <input type="file" id="fileInput" name="attachments" multiple class="d-none">
            <button type="button" class="btn btn-outline-primary mt-2" id="browseFilesBtn">
              <i class="fas fa-folder-open me-2"></i>Browse Files
            </button>
          </div>
          <div id="fileList" class="mt-3"></div>
        </div>
        
        <!-- Submit Buttons -->
        

  <script>
       document.addEventListener('DOMContentLoaded', function() {
      // Get form elements
      document.getElementById('cancelButton').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? All entered data will be lost.')) {
          window.location.href = '/tickets';
        }
      });
      const ticketForm = document.getElementById('ticketForm');
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      const loadingOverlay = document.getElementById('loadingOverlay');
      const submitButton = document.getElementById('submitButton');
      
      // File upload handling
      const fileUploadArea = document.querySelector('.file-upload-area');
      const fileInput = document.getElementById('fileInput');
      const browseFilesBtn = document.getElementById('browseFilesBtn');
      const fileList = document.getElementById('fileList');
      
      // Click on area or button to trigger file input
      fileUploadArea.addEventListener('click', function() {
        fileInput.click();
      });
      
      browseFilesBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        fileInput.click();
      });
      
      // Drag and drop effects
      fileUploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('bg-light');
      });
      
      fileUploadArea.addEventListener('dragleave', function() {
        this.classList.remove('bg-light');
      });
      
      fileUploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        this.classList.remove('bg-light');
        
        if (e.dataTransfer.files.length) {
          fileInput.files = e.dataTransfer.files;
          updateFileList();
        }
      });
      
      // File input change handler
      fileInput.addEventListener('change', updateFileList);
      
      // Update file list display
      function updateFileList() {
        fileList.innerHTML = '';
        
        if (fileInput.files.length > 0) {
          const listGroup = document.createElement('div');
          listGroup.className = 'list-group';
          
          for (let i = 0; i < fileInput.files.length; i++) {
            const file = fileInput.files[i];
            const fileSize = (file.size / 1024).toFixed(1); // KB
            
            const listItem = document.createElement('div');
            listItem.className = 'list-group-item d-flex align-items-center';
            listItem.innerHTML = `
              <i class="${getFileIcon(file.name)} me-3 text-primary"></i>
              <div class="flex-grow-1">
                <div class="d-flex justify-content-between">
                  <span class="text-truncate" style="max-width: 250px;">${file.name}</span>
                  <small class="text-muted">${fileSize} KB</small>
                </div>
              </div>
              <button type="button" class="btn btn-sm btn-link text-danger remove-file" data-index="${i}">
                <i class="fas fa-times"></i>
              </button>
            `;
            
            listGroup.appendChild(listItem);
          }
          
          fileList.appendChild(listGroup);
          
          // Add event listeners to remove buttons
          document.querySelectorAll('.remove-file').forEach(button => {
            button.addEventListener('click', function() {
              const index = parseInt(this.getAttribute('data-index'));
              removeFile(index);
            });
          });
        }
      }
      
      // Remove file from list
      function removeFile(index) {
        const dt = new DataTransfer();
        const files = fileInput.files;
        
        for (let i = 0; i < files.length; i++) {
          if (i !== index) {
            dt.items.add(files[i]);
          }
        }
        
        fileInput.files = dt.files;
        updateFileList();
      }
      
      // Get appropriate icon for file type
      function getFileIcon(filename) {
        const extension = filename.split('.').pop().toLowerCase();
        
        const iconMap = {
          'pdf': 'fas fa-file-pdf',
          'doc': 'fas fa-file-word',
          'docx': 'fas fa-file-word',
          'xls': 'fas fa-file-excel',
          'xlsx': 'fas fa-file-excel',
          'ppt': 'fas fa-file-powerpoint',
          'pptx': 'fas fa-file-powerpoint',
          'jpg': 'fas fa-file-image',
          'jpeg': 'fas fa-file-image',
          'png': 'fas fa-file-image',
          'gif': 'fas fa-file-image',
          'zip': 'fas fa-file-archive',
          'rar': 'fas fa-file-archive',
          'txt': 'fas fa-file-alt'
        };
        
        return iconMap[extension] || 'fas fa-file';
      }
      
      // Cancel button
    
      
 

      // Form validation and submission
      ticketForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        // Check form validity
        if (!ticketForm.checkValidity()) {
          event.stopPropagation();
          ticketForm.classList.add('was-validated');
          
          // Show alert for validation error
          showAlert('Please fill in all required fields.', 'danger');
          return;
        }
        
        // Create FormData object for file upload
        const formData = new FormData(ticketForm);
        
        // Add ticket type

        // Add priority
      
        // Show loading overlay
        // loadingOverlay.style.display = 'flex';
        submitButton.disabled = true;
        
        // Send form data to server using fetch API
     // Send form data to server using fetch API
            // fetch('/tickets/newticket', {
            //   method: 'POST',
            //   body: formData,
            // })
            // .then(response => {
            //   if (!response.ok) {
            //     throw new Error(`Server responded with status: ${response.status}`);
            //   }
            //   return response.json(); // Make sure to parse the JSON response
            // })
            // .then(data => {
            //   // Show success message
            //   showAlert('Ticket created successfully! Redirecting to tickets page...', 'success');

            //   // Reset form
            //   ticketForm.reset();
            //   fileList.innerHTML = '';
            //   ticketForm.classList.remove('was-validated');

            //   // Optional redirect
            //   setTimeout(() => {
            //     window.location.href = `/tickets`;
            //   }, 2000);
            // })
            // .catch(error => {
            //   console.error('Error creating ticket:', error);
            //   showAlert('Error creating ticket. Please try again later.', 'danger');
            // })
            // .finally(() => {
            //   // Always hide the overlay and re-enable the button
            //   loadingOverlay.style.display = 'none';
            //   submitButton.disabled = false;
            // });
      });
      
      // Function to show alert
      function showAlert(message, type) {
        alertMessage.innerText = message;
        alertContainer.querySelector('.alert').className = `alert alert-${type} alert-dismissible fade show`;
        alertContainer.style.display = 'block';
        loadingOverlay.style.display = 'none';
        submitButton.disabled = false;

        // Auto hide after 5 seconds
        // setTimeout(() => {
        //   const bsAlert = new bootstrap.Alert(alertContainer.querySelector('.alert'));
        //   bsAlert.close();
        // }, 5000);
      }
    });
 
  </script>