<%- include('./components/head.ejs') -%>

<body>
  <!-- Sidebar -->
  <%- include('./components/navigation.ejs') -%>

  <!-- Content Wrapper -->
  <div id="content">
    <!-- Top Navigation -->
    <nav class="topbar">
      <div class="d-flex align-items-center">
        <button class="mobile-menu-toggle me-3" id="mobileMenuToggle">
          <i class="fas fa-bars"></i>
        </button>
        <h1 class="page-title mb-0">View From</h1>
      </div>
      <div class="user-menu">
        <div class="dropdown">
          <a href="#" class="d-flex align-items-center text-decoration-none dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="me-2 d-none d-sm-inline fw-bold">John Doe</span>
            <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="User" class="user-avatar">
          </a>
          <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="userDropdown">
            <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i> Profile</a></li>
            
            <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i> Settings</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="/logout"><i class="fas fa-sign-out-alt me-2"></i> Logout</a></li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="container-fluid p-4">
        <div class="row justify-content-center">
            <div class="col-xl-8 col-lg-10">
                <% if (ticket.ticketType == 'GeneralTicket') { %>
                    <%- include('./tickets/generalticket.ejs',{buttons:true}) %>
                  <% } %>
                  
                  <% if (ticket.ticketType == 'BackupRequest') { %>
                    <%- include('./tickets/backuprequestform.ejs') %>
                  <% } %>
                  <% if (ticket.ticketType == 'ChangeRequest') { %>
                    <%- include('./tickets/changerequestform.ejs') %>
                  <% } %>
        
                  <% if (ticket.ticketType == 'ChangeManagement') { %>
                    <%- include('./tickets/changemanagement.ejs') %>
                  <% } %>
        
                  <% if (ticket.ticketType == 'DataBreach') { %>
                    <%- include('./tickets/databreachform.ejs') %>
                  <% } %>
        
                  <% if (ticket.ticketType == 'ExitClearance') { %>
                    <%- include('./tickets/exitclearance.ejs') %>
                  <% } %>
        
                  <% if (ticket.ticketType == 'IncidentReport') { %>
                    <%- include('./tickets/incidentreport.ejs') %>
                  <% } %>
        
                  <% if (ticket.ticketType == 'NewUserCreation') { %>
                    <%- include('./tickets/newusercreation.ejs') %>
                  <% } %>
        
                  <div class="d-flex justify-content-end gap-3">
                    <a href="/tickets/downloadform/<%=ticket._id%>" class="btn btn-outline-secondary" >
                      Download
                    </a>
                    <button type="submit" class="btn btn-primary" id="submitButton">
                      <i class="fas fa-ticket-alt me-2"></i> Edit Ticket
                    </button>
                  </div>
                </form>
              </div>
            </div>

</div>
</div>
    </div>
  


  </div>

  <!-- Loading Overlay -->


  <!-- Bootstrap JS Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Mobile menu toggle
    document.addEventListener('DOMContentLoaded', function() {
  // Get the ticket object from the server-side rendered data
  const ticket = <%- JSON.stringify(ticket) %>;
  
  // Helper function to set form values
  function setFormValue(element, value) {
    if (!element || value === undefined || value === null) return;
    
    if (element.type === 'checkbox') {
      element.checked = value === true || value === 'true' || value === '1';
    } else if (element.tagName === 'SELECT') {
      // For select elements, find and select the matching option
      const optionExists = Array.from(element.options).some(option => {
        if (option.value == value) { // Loose equality to handle string/number conversion
          option.selected = true;
          return true;
        }
        return false;
      });
      
      // If no matching option found, try to add it (for dynamic options)
      if (!optionExists && value) {
        const newOption = new Option(value, value, true, true);
        element.add(newOption);
      }
    } else if (element.type === 'date' && value) {
      // Format date values to YYYY-MM-DD
      try {
        const dateObj = new Date(value);
        if (!isNaN(dateObj.getTime())) {
          element.value = dateObj.toISOString().split('T')[0];
        } else {
          element.value = value;
        }
      } catch (e) {
        element.value = value;
      }
    } else {
      element.value = value;
    }
  }

  // Get all form elements with names
  const formElements = document.querySelectorAll('#ticketForm [name]');
  
  // Map to store flattened ticket data for easier access
  const flattenedTicket = {};
  
  // Flatten the ticket object
  function flattenObject(obj, prefix = '') {
    if (!obj) return;
    
    Object.entries(obj).forEach(([key, value]) => {
      const newKey = prefix ? `${prefix}.${key}` : key;
      
      if (value !== null && typeof value === 'object' && !(value instanceof Date) && !Array.isArray(value)) {
        flattenObject(value, newKey);
      } else {
        flattenedTicket[newKey] = value;
      }
    });
  }
  
  flattenObject(ticket);
  
  // Populate all form elements with matching ticket data
  formElements.forEach(element => {
    const name = element.getAttribute('name');
    
    // Direct match with name
    if (flattenedTicket[name] !== undefined) {
      setFormValue(element, flattenedTicket[name]);
    } 
    // Handle dot notation in name attribute (e.g., "requestor.email")
    else {
      // For handling form elements with dot notation in their names
      setFormValue(element, getValueByPath(ticket, name));
    }
  });
  
  // Function to get a value by dot path from an object
  function getValueByPath(obj, path) {
    if (!obj || !path) return undefined;
    
    const keys = path.split('.');
    let current = obj;
    
    for (const key of keys) {
      if (current === null || current === undefined) return undefined;
      current = current[key];
    }
    
    return current;
  }
  
  // Handle "Other" fields visibility
  const handleOtherFieldVisibility = (selectElement, otherInputName) => {
    const select = document.querySelector(selectElement);
    const otherInput = document.querySelector(`[name="${otherInputName}"]`);
    
    if (select && otherInput) {
      // Initialize visibility
      otherInput.style.display = select.value === 'Other' ? 'block' : 'none';
      
      // Add change event listener
      select.addEventListener('change', function() {
        otherInput.style.display = this.value === 'Other' ? 'block' : 'none';
      });
    }
  };
  
  // Apply to specific Other fields
  handleOtherFieldVisibility('select[name="formData.data9"]', 'formData.data10');
  handleOtherFieldVisibility('select[name="formData.data11"]', 'formData.data12');
  
  // Make all form fields editable
  const viewOnly = false; // Set this to false to allow editing
  if (viewOnly) {
    const allFormInputs = document.querySelectorAll('#ticketForm input, #ticketForm select, #ticketForm textarea');
    allFormInputs.forEach(input => {
      input.setAttribute('readonly', true);
      if (input.tagName === 'SELECT') {
        input.setAttribute('disabled ', true);
      }
    });
  }

  const ticketForm = document.getElementById('ticketForm');
      ticketForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        // Check form validity
        if (!ticketForm.checkValidity()) {
          event.stopPropagation();
          ticketForm.classList.add('was-validated');
          
          // Show alert for validation error
          showAlert('Please fill in all required fields.', 'danger');
          return;
        }
        
        // Create FormData object for file upload
        const formData = new FormData(ticketForm);
        formData.append('ticketId', ticket._id);

        // Add ticket type

        // Add priority
      
        // Show loading overlay
        loadingOverlay.style.display = 'flex';
        submitButton.disabled = true;
        
        // Send form data to server using fetch API
     // Send form data to server using fetch API
            fetch('/tickets/updateticketform', {
              method: 'POST',
              body: formData,
            })
            .then(response => {
              if (!response.ok) {
                throw new Error(`Server responded with status: ${response.status}`);
              }
              return response.json(); // Make sure to parse the JSON response
            })
            .then(data => {
              // Show success message
              showAlert('Ticket created successfully! Redirecting to tickets page...', 'success');

              // Reset form
              ticketForm.reset();
              ticketForm.classList.remove('was-validated');

              // Optional redirect
              setTimeout(() => {
                window.location.href = `/tickets`;
              }, 2000);
            })
            .catch(error => {
              console.error('Error creating ticket:', error);
              showAlert('Error creating ticket. Please try again later.', 'danger');
            })
            .finally(() => {
              // Always hide the overlay and re-enable the button
              loadingOverlay.style.display = 'none';
              submitButton.disabled = false;
            });
      });
      function showAlert(message, type) {
        alertMessage.innerText = message;
        alertContainer.querySelector('.alert').className = `alert alert-${type} alert-dismissible fade show`;
        alertContainer.style.display = 'block';
        loadingOverlay.style.display = 'none';
        submitButton.disabled = false;

        setTimeout(() => {
          const bsAlert = new bootstrap.Alert(alertContainer.querySelector('.alert'));
          bsAlert.close();
        }, 5000);
      }
      
  
  // For debugging - log what fields were found and populated
});
  </script>
  </body>
</html>