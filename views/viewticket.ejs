<%- include('./components/head.ejs') -%>

<body>
  <!-- Sidebar -->
  <%- include('./components/navigation.ejs') -%>

  <!-- Content Wrapper -->
  <div id="content">
    <!-- Top Navigation -->
    <nav class="topbar">
      <div class="d-flex align-items-center">
        <button class="mobile-menu-toggle me-3" id="mobileMenuToggle">
          <i class="fas fa-bars"></i>
        </button>
        <h1 class="page-title mb-0">Update Ticket</h1>
      </div>
      <div class="user-menu">
        <div class="dropdown">
          <a href="#" class="d-flex align-items-center text-decoration-none dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="me-2 d-none d-sm-inline fw-bold"><%=user.name%></span>
            <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="User" class="user-avatar">
          </a>
          <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="userDropdown">
            <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i> Profile</a></li>
            
            <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i> Settings</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="/logout"><i class="fas fa-sign-out-alt me-2"></i> Logout</a></li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="container-fluid p-4">
      <!-- Breadcrumb -->
      <!-- <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="#">Dashboard</a></li>
          <li class="breadcrumb-item"><a href="#">Tickets</a></li>
          <li class="breadcrumb-item active" aria-current="page">Ticket Details</li>
        </ol>
      </nav>
     -->
      <!-- Ticket Details Card -->
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0">Ticket #<span id="ticketId">-</span></h5>
          <div class="badge bg-light text-dark" id="ticketStatus">Pending</div>
        </div>
        <div class="card-body">
          <div class="row mb-3">
            <div class="col-md-6">
              <h6 class="fw-bold">Title</h6>
              <p id="ticketTitle" class="text-muted">Loading...</p>
            </div>
            <div class="col-md-6">
              <h6 class="fw-bold">Created By</h6>
              <p id="ticketCreatedBy" class="text-muted">-</p>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-4">
              <h6 class="fw-bold">Type</h6>
              <p id="ticketType" class="text-muted">-</p>
            </div>
            <div class="col-md-4">
              <h6 class="fw-bold">Priority</h6>
              <p id="ticketPriority" class="text-muted">-</p>
            </div>
            <div class="col-md-4">
              <h6 class="fw-bold">Category</h6>
              <p id="ticketCategory" class="text-muted">-</p>
            </div>
          </div>
          
          <div class="mb-3">
            <h6 class="fw-bold">Description</h6>
            <p id="ticketDescription" class="text-muted">-</p>
          </div>
          
          <!-- Form Data Button (Conditional) -->
          <div id="formDataSection" class="mb-3 d-none">
            <a id="viewFormDataBtn" href="/tickets/viewform/<%=ticket._id%>" class="btn btn-outline-primary">
              <i class="fas fa-file-alt me-2"></i>View Form
            </a>

     
          </div>
     
          <div id="attachmentsSection" class="mb-3 d-none">
            <h6 class="fw-bold">Attachments</h6>
            <div id="ticketAttachments" class="d-flex flex-wrap gap-2">
              <!-- Attachments will be added here dynamically -->
            </div>
          </div>
        </div>
        <div class="card-footer bg-light d-flex justify-content-between">
          <small class="text-muted">Created: <span id="ticketCreatedAt">-</span></small>
          <div>
            <a href="/tickets/downloadform/<%=ticket._id%>" class="btn btn-sm btn-outline-secondary me-2 d-none" id="printTicketBtn">
              <i class="fas fa-print me-1"></i>Download Pdf
            </a>
            <button class="btn btn-sm btn-outline-danger" id="closeTicketBtn">
              <i class="fas fa-times me-1"></i>Close
            </button>
          </div>
        </div>
      </div>
    
      <!-- Status Update Section -->
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
          <h6 class="card-title mb-0">Update Status</h6>
        </div>
        <div class="card-body">
          <form id="statusUpdateForm">
            <div class="row">
              <%if(user.role=='Admin'){%>
                <div class="col-md-4 mb-3" id="selectdiv">
                    <label for="assignToSelect" class="form-label">Assign To</label>
                    <select class="form-select select2-employee" id="assignToSelect">
                      <option value="">Unassigned</option>
                      <!-- Options will be loaded dynamically -->
                    </select>
                  </div>
                  <%}%>
              <div class="col-md-4 mb-3">
                <label for="statusSelect" class="form-label">Status</label>
                <select class="form-select" id="statusSelect">
                  <option value="Open" selected>Open</option>

                  <option value="Pending">Pending</option>
                  <option value="On Hold">On Hold</option>
                  <option value="Resolved">Resolved</option>
                  <option value="Closed">Closed</option>
                </select>
              </div>
             
              <div class="col-md-4 mb-3">
                <label for="prioritySelect" class="form-label">Priority</label>
                <select class="form-select" id="prioritySelect">
                  <option value="Low">Low</option>
                  <option value="Medium" selected>Medium</option>
                  <option value="High">High</option>
                  <option value="Critical">Critical</option>
                </select>
              </div>
            </div>
            <div class="mb-3">
              <label for="statusComment" class="form-label">Comments</label>
              <textarea class="form-control" id="statusComment" rows="3" placeholder="Add any updates or comments..."></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Update Status</button>
          </form>
        </div>
      </div>
    
      <!-- Activity Log -->
      <div class="card shadow-sm">
        <div class="card-header bg-light">
          <h6 class="card-title mb-0">Activity Log</h6>
        </div>
        <div class="card-body">
          <div class="timeline">
         
        </div>
      </div>
    </div>
    
    <!-- Modal for Form Data -->
    <!-- <div class="modal fade" id="formDataModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Form Data Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body" id="formDataModalBody">
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="editFormDataBtn">Edit Form</button>
          </div>
        </div>
      </div>
    </div> -->
    
    <style>
      .timeline {
        position: relative;
        padding-left: 1.5rem;
      }
      
      .timeline::before {
        content: '';
        position: absolute;
        left: 0.5rem;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: #e9ecef;
      }
      
      .timeline-item {
        position: relative;
        padding-bottom: 1.5rem;
      }
      
      .timeline-badge {
        position: absolute;
        left: -0.5rem;
        top: 0;
        width: 1.5rem;
        height: 1.5rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        z-index: 1;
      }
      
      .timeline-content {
        margin-left: 2rem;
        padding: 0.5rem 1rem;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
      }
      
      .attachment-thumb {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: transform 0.2s;
      }
      
      .attachment-thumb:hover {
        transform: scale(1.05);
      }
    </style>
    <style>
        /* Toast styles */
        .toast-container {
          z-index: 1060;
        }
        
        .toast {
          box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.1);
        }
        
        .border-success {
          border-left-color: #28a745 !important;
        }
        
        .border-danger {
          border-left-color: #dc3545 !important;
        }
        
        .border-warning {
          border-left-color: #ffc107 !important;
        }
        
        .border-info {
          border-left-color: #17a2b8 !important;
        }
        
      </style>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const ticket = <%- JSON.stringify(ticket) %>;

        // Populate ticket data
        document.getElementById('ticketId').textContent = ticket._id;
        document.getElementById('ticketTitle').textContent = ticket.title;
        document.getElementById('ticketCreatedBy').textContent = ticket.requestor.name + ' (' + ticket.requestor.customerid + ')';
        document.getElementById('ticketType').textContent = ticket.ticketType;
        document.getElementById('ticketPriority').textContent = ticket.priority;
        document.getElementById('ticketCategory').textContent = ticket.category;
        document.getElementById('ticketDescription').textContent = ticket.description;
        document.getElementById('ticketStatus').textContent = ticket.status;
        document.getElementById('ticketCreatedAt').textContent = new Date(ticket.createdAt).toLocaleString();
        
        // Update status dropdown to current status
        document.getElementById('statusSelect').value = ticket.status;
        document.getElementById('prioritySelect').value = ticket.priority;
    
        // Show form data button if formData exists
        if (ticket.formData && Object.keys(ticket.formData).length > 0) {
          document.getElementById('formDataSection').classList.remove('d-none');
          document.getElementById('printTicketBtn').classList.remove('d-none');

        }
    
        // Show attachments if they exist
        if (ticket.attachments && ticket.attachments.length > 0) {
          document.getElementById('attachmentsSection').classList.remove('d-none');
          const attachmentsContainer = document.getElementById('ticketAttachments');
          ticket.attachments.forEach(attachment => {
            const attachmentElement = document.createElement('div');
            attachmentElement.className = 'attachment-thumb-container';
            attachmentElement.innerHTML = `
  <a href="/attachments/${attachment}" target="_blank">
    <img src="/attachments/${attachment}" alt="${attachment}" class="attachment-thumb" data-bs-toggle="tooltip" title="${attachment}">
  </a>`;
            attachmentsContainer.appendChild(attachmentElement);
          });
        }
    
       
document.getElementById('statusUpdateForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const newStatus = document.getElementById('statusSelect').value;
  const newPriority = document.getElementById('prioritySelect').value;
  const assignedTo = document.getElementById('assignToSelect').value;
  const comment = document.getElementById('statusComment').value;
  
  // Show loading indicator
  const submitBtn = this.querySelector('button[type="submit"]');
  const originalBtnText = submitBtn.innerHTML;
  submitBtn.disabled = true;
  submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';
  
  // Make API call to update the ticket
  fetch('/tickets/updateticketstatus', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      ticketId: ticket._id,
      status: newStatus,
      priority: newPriority,
      assignedTo,
      comment
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Update the UI
      document.getElementById('ticketStatus').textContent = newStatus;
      document.getElementById('ticketPriority').textContent = newPriority;
      
      // Add new activity to the timeline
      addActivityToTimeline(data.activity);
      
      // Clear comment field
      document.getElementById('statusComment').value = '';
      
      // Show success message
      showToast('Success', 'Ticket updated successfully!', 'success');
    } else {
      showToast('Error', data.message || 'Error updating ticket status', 'danger');
    }
  })
  .catch(error => {
    console.error('Error updating ticket status:', error);
    showToast('Error', 'Network or server error occurred', 'danger');
  })
  .finally(() => {
    // Restore button state
    submitBtn.disabled = false;
    submitBtn.innerHTML = originalBtnText;
  });
});

// Function to add activity to timeline
function addActivityToTimeline(activity) {
  const activityLog = document.querySelector('.timeline');
  const newActivity = document.createElement('div');
  newActivity.className = 'timeline-item';
  
  // Determine badge color based on activity type
  let badgeColor = 'bg-info';
  if (activity.title.includes('Status')) badgeColor = 'bg-info';
  if (activity.title.includes('Assigned')) badgeColor = 'bg-success';
  if (activity.title.includes('Closed')) badgeColor = 'bg-danger';
  if (activity.title.includes('Priority')) badgeColor = 'bg-warning';
  
  newActivity.innerHTML = `
    <div class="timeline-badge ${badgeColor}"></div>
    <div class="timeline-content">
      <div class="d-flex justify-content-between">
        <h6 class="mb-1">${activity.title}</h6>
        <small class="text-muted">${formatTimeAgo(new Date(activity.date))}</small>
      </div>
      <p class="mb-0">${activity.solution}</p>
    </div>
  `;
  
  activityLog.insertBefore(newActivity, activityLog.firstChild);
}

// Helper function to format date as "time ago"
function formatTimeAgo(date) {
  const now = new Date();
  const diffMs = now - date;
  const diffSec = Math.round(diffMs / 1000);
  const diffMin = Math.round(diffSec / 60);
  const diffHour = Math.round(diffMin / 60);

  if (diffSec < 60) return 'Just now';
  if (diffMin < 60) return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;
  if (diffHour < 24) return `${diffHour} hour${diffHour > 1 ? 's' : ''} ago`;
  return date.toLocaleDateString();
}

// Toast notification function
function showToast(title, message, type) {
  // Create toast container if it doesn't exist
  let toastContainer = document.querySelector('.toast-container');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
    document.body.appendChild(toastContainer);
  }
  
  const toastId = 'toast-' + Date.now();
  const toast = document.createElement('div');
  toast.className = `toast align-items-center border-0 border-start border-4 border-${type}`;
  toast.setAttribute('role', 'alert');
  toast.setAttribute('aria-live', 'assertive');
  toast.setAttribute('aria-atomic', 'true');
  toast.setAttribute('id', toastId);
  
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <strong>${title}</strong>: ${message}
      </div>
      <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  const toastInstance = new bootstrap.Toast(toast);
  toastInstance.show();
  
  // Remove toast after it's hidden
  toast.addEventListener('hidden.bs.toast', function() {
    toast.remove();
  });
}
// Function to load and display activity log
function loadActivityLog() {
  // Clear existing timeline items (except the first one which is ticket creation)
  const timeline = document.querySelector('.timeline');
  while (timeline.children.length > 1) {
    timeline.removeChild(timeline.lastChild);
  }
  
  // If ticket has activity, display it
  if (ticket.activity && ticket.activity.length > 0) {
    // Sort activities by date (newest first)
    ticket.activity.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    // Add each activity to the timeline
    ticket.activity.forEach(activity => {
      const activityItem = document.createElement('div');
      activityItem.className = 'timeline-item';
      
      // Determine badge color based on activity type
      let badgeColor = 'bg-info';
      if (activity.title && activity.title.includes('Status')) badgeColor = 'bg-info';
      if (activity.title && activity.title.includes('Assigned')) badgeColor = 'bg-success';
      if (activity.title && activity.title.includes('Closed')) badgeColor = 'bg-danger';
      if (activity.title && activity.title.includes('Priority')) badgeColor = 'bg-warning';
      
      activityItem.innerHTML = `
        <div class="timeline-badge ${badgeColor}"></div>
        <div class="timeline-content">
          <div class="d-flex justify-content-between">
            <h6 class="mb-1">${activity.title || 'Activity'}</h6>
            <small class="text-muted">${formatTimeAgo(new Date(activity.date))}</small>
          </div>
          <p class="mb-0">${activity.solution || 'No details provided'}</p>
        </div>
      `;
      
      timeline.appendChild(activityItem);
    });
  }
  
  // Also show assignment history if available
  if (ticket.assigned && ticket.assigned.length > 0) {
    ticket.assigned.forEach(assign => {
      const assignItem = document.createElement('div');
      assignItem.className = 'timeline-item';
      
      assignItem.innerHTML = `
        <div class="timeline-badge bg-success"></div>
        <div class="timeline-content">
          <div class="d-flex justify-content-between">
            <h6 class="mb-1">Ticket Assigned</h6>
            <small class="text-muted">${formatTimeAgo(new Date(assign.date))}</small>
          </div>
          <p class="mb-0">Assigned to ${assign.employee} by ${assign.assignedby}</p>
        </div>
      `;
      
      timeline.appendChild(assignItem);
    });
  }
}

// Call this function when the page loads
  // ... other existing code ...
  
  // Load activity log
  loadActivityLog();
    // Close ticket button handler
document.getElementById('closeTicketBtn').addEventListener('click', function() {
  if (confirm('Are you sure you want to close this ticket?')) {
    const comment = prompt('Add any closing comments (optional):');
    
    // Show loading state
    const btn = this;
    const originalText = btn.innerHTML;
    btn.disabled = true;
    btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Closing...';
    
    // Make API call to close the ticket
    fetch(`/tickets/${ticket._id}/close`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ comment })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update UI
        document.getElementById('ticketStatus').textContent = 'Closed';
        document.getElementById('statusSelect').value = 'Closed';
        
        // Add to activity log
        addActivityToTimeline(data.activity);
        
        showToast('Success', 'Ticket closed successfully!', 'success');
      } else {
        showToast('Error', data.message || 'Error closing ticket', 'danger');
      }
    })
    .catch(error => {
      console.error('Error closing ticket:', error);
      showToast('Error', 'Network or server error occurred', 'danger');
    })
    .finally(() => {
      // Restore button state
      btn.disabled = false;
      btn.innerHTML = originalText;
    });
  }
});
        // Print ticket button handler
        // document.getElementById('printTicketBtn').addEventListener('click', function() {
        //   window.print();
        // });
      });

    </script>
  </div>

  <!-- Loading Overlay -->


  <!-- Bootstrap JS Bundle with Popper -->
  
  <script>
    // Mobile menu toggle
    document.addEventListener('DOMContentLoaded', function() {
      const sidebar = document.getElementById('sidebar');
      const mobileMenuToggle = document.getElementById('mobileMenuToggle');
      
      if (mobileMenuToggle && sidebar) {
        mobileMenuToggle.addEventListener('click', function() {
          sidebar.classList.toggle('open');
        });
      }
    });
  </script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Select2 CSS -->

<!-- Select2 JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />


<script>


$(document).ready(function() {
  // Initialize Select2
  $('.select2-employee').select2({
    placeholder: 'Select an employee',
    allowClear: true,
    ajax: {
      url: '/employee/select-list',
      dataType: 'json',
      delay: 250, // milliseconds
      processResults: function(data) {
        return {
          results: data.map(employee => ({
            id: employee.name,
            text: employee.name
          }))
        };
      },
      cache: true
    },
    minimumInputLength: 0 ,
    dropdownParent: $("#selectdiv"),

    // Show all options without typing
  });
})
</script>
  </body>
</html>